test_dtm_1
y_expected_1
plus::get_auc(object = model1, newx = test_dtm_1, newy = y_expected_1)
t1 <- table(y_expected_1, y_observed)
plus::get_auc(object = model1, newx = test_dtm_1, newy = y_observed)
plus::get_auc(object = model2, newx = test_dtm_2, newy = y_observed)
plus::get_auc(object = model3, newx = test_dtm_3, newy = y_observed)
plus::get_auc(object = model2, newx = test_dtm_2, newy = y_observed)
v2 <- get_vocabulary(lacs, term_count = 1)
v3 <- get_vocabulary(lacs)
v4 <- get_vocabulary(lacs, term_count = 50)
y_expected_2 <- predict(model2, newx = test_dtm_2, type = "class")
y_expected_3 <- predict(model3, newx = test_dtm_3, type = "class")
y_expected_4 <- predict(model4, newx = test_dtm_4, type = "class")
test_dtm_3 <- get_dtm(abstracts = test, vocabulary = v3)
test_dtm_4 <- get_dtm(abstracts = test, vocabulary = v4)
test_dtm_2 <- get_dtm(abstracts = test, vocabulary = v2)
y_expected_4
test_dtm_4 <- get_dtm(abstracts = test, vocabulary = v4)
y_expected_4 <- predict(model4, newx = test_dtm_4, type = "class")
model4 <- fit_plus(train, v3)
model4 <- fit_plus(train, v4)
y_expected_4 <- predict(model4, newx = test_dtm_4, type = "class")
t4 <- table(y_expected_1, y_observed)
t4
t4[4]
t4[2]
t4[3]
t4[4]/(t4[4] + t4[3])
tab[4]/(tab[4] + tab[3])
recall <- function(tab){
tab[4]/(tab[4] + tab[3])
}
recall(t1)
recall(t2)
recall(t4)
recall(t3)
recall(t4)
t1
t2
t3
t1
t4
recall_2 <- function(tab){
diag(tab) / rowSums(tab)}
recall_2(t1)
recall_2(t2)
recall_2(t3)
recall_2(t4)
caret::confusionMatrix()
install.packages("caret")
plus::get_auc(object = model1, newx = test_dtm_1, newy = y_observed)
plus::get_auc(object = model1, newx = test_dtm_1, newy = y_observed)
plus::get_auc(object = model2, newx = test_dtm_2, newy = y_observed)
plus::get_auc(object = model1, newx = test_dtm_1, newy = y_observed)
plus::get_auc(object = model2, newx = test_dtm_2, newy = y_observed)
plus::get_auc(object = model3, newx = test_dtm_3, newy = y_observed)
plus::get_auc(object = model4, newx = test_dtm_4, newy = y_observed)
test_dtm_1
test_dtm_2
na_rodents <- readr::read_csv("C:/Users/norma/OneDrive - Arizona State University/lacs/data-raw/na_rodents.csv")
na_rodents_dtm_1 <- na_rodents |> get_abstracts() |> get_dtm(v1)
na_rodents_dtm_2 <- na_rodents |> get_abstracts() |> get_dtm(v2)
na_rodents_dtm_4 <- na_rodents |> get_abstracts() |> get_dtm(v4)
y_na_rodents_expected_1 <- predict(model1, newx = na_rodents_dtm_1, type = "class")
y_na_rodents_expected_2 <- predict(model2, newx = na_rodents_dtm_2, type = "class")
y_na_rodents_expected_3 <- predict(model3, newx = na_rodents_dtm_2, type = "class")
y_na_rodents_expected_3 <- predict(model3, newx = na_rodents_dtm_2, type = "class")
y_na_rodents_expected_4 <- predict(model4, newx = na_rodents_dtm_2, type = "class")
y_na_rodents_expected_3 <- predict(model3, newx = na_rodents_dtm_3 type = "class")
y_na_rodents_expected_3 <- predict(model3, newx = na_rodents_dtm_3, type = "class")
na_rodents_dtm_3 <- na_rodents |> get_abstracts() |> get_dtm(v3)
na_rodents_dtm_4 <- na_rodents |> get_abstracts() |> get_dtm(v4)
y_na_rodents_expected_4 <- predict(model4, newx = na_rodents_dtm_4, type = "class")
y_observed <- na_rodents |> get_abstracts() |>  get_y()
t_na_1 <- table(y_na_rodents_expected_1, y_observed)
t_na_2 <- table(y_na_rodents_expected_2, y_observed)
t_na_3 <- table(y_na_rodents_expected_3, y_observed)
y_na_rodents_expected_3
y_na_rodents_expected_3 <- predict(model3, newx = na_rodents_dtm_3, type = "class")
y_na_rodents_expected_3 <- predict(model3, newx = na_rodents_dtm_3, type = "class")
t_na_4 <- table(y_na_rodents_expected_5, y_observed)
t_na_4 <- table(y_na_rodents_expected_4, y_observed)
t_na_4
recall(t_na_4)
recall(t_na_1)
t_na_1
t_na_2
t_na_3
recall(t_na_2)
v2 <- get_vocabulary(lacs, term_count = 10)
install.package("caret")
install.packages("caret")
data("two_class_example")
install.packages("tidymodels")
data("two_class_example")
library(yardstick)
data("two_class_example")
recall(two_class_example, truth, predicted)
two_class_example
truth
data("two_class_example")
recall(two_class_example, truth, predicted)
two_class_example
recall(two_class_example)
yardstick::recall(two_class_example)
source("~/.active-rstudio-document", echo=TRUE)
yardstick::recall(two_class_example, truth, predicted)
two_class_example
t_na_1
yardstick::recall(truth, predicted)
yardstick::recall(y_na_rodents_expected_1, y_observed)
tibble::tibble(truth = y_na_rodents_expected_1, predicted = y_observed)
t1 <- tibble::tibble(truth = y_na_rodents_expected_1, predicted = y_observed)
t1
yardstick::recall(t1, truth, predicted)
t1
t1 <- tibble::tibble(truth = as.factor(y_na_rodents_expected_1), predicted = as.factor(y_observed))
yardstick::recall(t1, truth, predicted)
t2 <- tibble::tibble(truth = as.factor(y_na_rodents_expected_2), predicted = as.factor(y_observed))
yardstick::recall(t2, truth, predicted)
y_na_rodents_expected_3
t4 <- tibble::tibble(truth = as.factor(y_na_rodents_expected_4), predicted = as.factor(y_observed))
t4
yardstick::recall(t4, truth, predicted)
yardstick::recall(t1, truth, predicted)
yardstick::recall(t2, truth, predicted)
yardstick::recall(t4, truth, predicted)
t1
model1
two_class_example
dim(two_class_example)
model1
class(model1)
model1$plus
predict(model1$plus, newx = na_rodents_dtm_1)
library(glmnet)
y_na_rodents_expected_1 <- predict(model1$plus, newx = na_rodents_dtm_1)
y_na_rodents_expected_1
y_na_rodents_expected_1b <- predict(model1$plus, newx = na_rodents_dtm_1, type = "class")
y_na_rodents_expected_1b
y_na_rodents_expected_1
y_na_rodents_expected_1 <-  plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "class")
y_na_rodents_expected_1
y_na_rodents_expected_1b
y_na_rodents_expected_1b <- predict(model1$plus, newx = na_rodents_dtm_1, type = "class") |> as.numeric()
y_na_rodents_expected_1b
t1 <- tibble::tibble(truth = as.factor(y_na_rodents_expected_1), predicted = as.factor(y_observed))
yardstick::recall(t1, truth, predicted)
t1 <- tibble::tibble(truth = as.factor(y_na_rodents_expected_1b), predicted = as.factor(y_observed))
yardstick::recall(t1, truth, predicted)
t_na_1b <- table(y_na_rodents_expected_1b, y_observed)
t_na_1b
t_na_1b
t_na_1
t_na_1b
t_na_1
recall(t_na_4)
recall(t_na_2)
recall(t_na_1b)
recall(t_na_1)
recall(t_na_1b)
glmnet
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response")
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response") |> arrange()
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response") |> dplyr::arrange()
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response")
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response") |> density() |> plot()
model1
model1$cutoff
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response")
glmnet::predict.glmnet(model1$plus, newx = na_rodents_dtm_1, type = "response")
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response")
glmnet::predict.glmnet(model1$plus, newx = na_rodents_dtm_1, type = "response")
na_rodents_dtm_1
glmnet::predict.glmnet(model1$plus, newx = na_rodents_dtm_1)
model1$plus
glmnet::predict.glmnet(model1$plus$glmnet.fit, newx = na_rodents_dtm_1, type = "response")
glmnet::print.cv.glmnet(model1$plus$glmnet.fit, newx = na_rodents_dtm_1, type = "response")
glmnet:::predict.cv.glmnet(model1$plus$glmnet.fit, newx = na_rodents_dtm_1, type = "response")
glmnet:::predict.cv.glmnet(model1$plus, newx = na_rodents_dtm_1, type = "response")
plus:::predict.plus(model1, newx = na_rodents_dtm_1, type = "response")
plus::predict.plus(model1, newx = na_rodents_dtm_1, type = "response")
predict(model1, newx = na_rodents_dtm_1, type = "response")
predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
predict(model1, newx = na_rodents_dtm_1, type = "response")
predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
predict(model1, newx = na_rodents_dtm_1, type = "response")
predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
a <- predict(model1, newx = na_rodents_dtm_1, type = "response")
b <- predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
a
plot(density(a))
plot(density(b))
a - b
plot(a - b)
plot(density(a - b))
(density(a - b))
plot((a - b))
((a - b))
a
model1
a <- predict(model1, newx = na_rodents_dtm_1, s="lambda.min", type = "response")
((a - b))
plot(density(a))
plot(density(b))
plot(density(a))
plot(density(b))
model1$plus
a <- predict(model1$plus, newx = na_rodents_dtm_1, s="lambda.min", type = "response")
a <- predict(model1$plus, newx = na_rodents_dtm_1, s="lambda.min", type = "response")
((a - b))
b <- predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
plot(density(a))
plot(density(b))
a <- predict(model1$plus, newx = na_rodents_dtm_1, s="lambda.min", type = "response")
b <- predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
plot(density(a))
plot(density(b))
a <- predict(model1$plus$glmnet.fit, newx = na_rodents_dtm_1, s="lambda.min", type = "response")
a <- predict(model1$plus$glmnet.fit, newx = na_rodents_dtm_1,  type = "response")
a
model1$plus
((a - b))
a <- predict(model1$plus, newx = na_rodents_dtm_1, s="lambda.1se", type = "response")
a
b <- predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
plot(density(a))
plot(density(b))
plot(density(a))
plot(density(b))
a <- predict(model1, newx = na_rodents_dtm_1, s="lambda.1se", type = "response")
model1
a <- predict(model1, newx = na_rodents_dtm_1, , type = "response")
((a - b))
plot(density(a))
plot(density(b))
plot(density(a))
b <- predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
a <- predict(model1, newx = na_rodents_dtm_1, s = "lambda.min",data/, type = "response")
a <- predict(model1, newx = na_rodents_dtm_1, s = "lambda.min", type = "response")
((a - b))
plot(density(a))
plot(density(b))
a <- predict(model1, newx = na_rodents_dtm_1, s = "lambda.min", type = "response")
a <- predict(model1, newx = na_rodents_dtm_1, s = "lambda.1se", type = "response")
b <- predict(model1$plus, newx = na_rodents_dtm_1, "lambda.min", type = "response")
a <- predict(model1, newx = na_rodents_dtm_1, s = "lambda.min", type = "response")
b <- predict(model1$plus, newx = na_rodents_dtm_1, "lambda.min", type = "response")
plot(density(a))
plot(density(b))
plot(density(a-b))
a
b
b <- predict(model1$plus, newx = na_rodents_dtm_1, "lambda.min", type = "response")
b <- predict(model1$plus, newx = na_rodents_dtm_1, s = "lambda.min", type = "response")
predict(model1$plus, newx = na_rodents_dtm_1, s = "lambda.min", type = "response")
predict(model1$plus, newx = na_rodents_dtm_1, type = "response")
predicted <-  predict(object$plus, newx = newx, type = "class") |> as.numeric()
two_class_example$truth
two_class_example
predicted
library(tidyverse)
library(devtools)
document(\)
document()
train <- abstracts[s, ]
test <- abstracts[s, ]
newx <- get_dtm(test, v)
newy <- get_y(test)
model <- fit_plus(train, v)
get_predictions(model, newx, newy)
get_predictions
get_predictions
document()
library(rsample)
data(LetterRecognition)
LetterRecognition
library(rsample)
library(mlbench)
data(LetterRecognition)
install.packages("mlbench")
library("mlbench")
data(LetterRecognition)
lobstr::obj_size(LetterRecognition)
library(rsample)
library("mlbench")
library(lobstr)
install.packages("lobstr")
library("lobstr")
lobstr::obj_size(LetterRecognition)
lobstr::obj_size(boots)
boots <- bootstraps(LetterRecognition, times = 50)
boots
boots
boots
boots[[1]]
boots$splits
boots$splits[[1]]
boots$splits[[1]]$data
boots <- bootstraps(LetterRecognition, times = 5)
abstracts <- get_abstracts(lacsSample[1:100, ])
v <- get_vocabulary(abstracts, term_count = 10)
v
abstracts
get_dtm(abstracts, v)
abstracts
boots <- bootstraps(abstracts, times = 5)
boots
abstracts
boots
boots |> unnest()
split
rm(split)
View(abstracts)
fit_plus_on_bootstrap <- function(split, vocabulary) {
fit_plus(split, vocabulary)
}
get_dtm_on_bootstrap <- function(split, vocabulary) {
get_dtm(split, vocabulary)
}
boots
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap) )
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap, v) )
abstracts
View(train)
class(abstracts)
abstracts$doi
get_dtm_on_bootstrap
fit_plus
boots
boots[1, ]
boots[1, ]$splits
boots[1, ]$splits
class(boots[1, ]$splits)
boots[1, ]$splits
boots[1, ]$splits[[1]]
boots[1, ]$splits[[2]]
boots[1, ]$splits[[1]]
boots[1, ]$splits[[1]][1]
boots[1, ]$splits[[1]]$data
boots[1, ]$splits[[1]]$in_id
boots[1, ]$splits[[1]]$id
abstracts
boots[1, ]$splits[[1]]$data
boots[1, ]$splits[[1]]
abstracts
boots[1, ]
boots[1, ]$splits
boots[1, ]$splits[ ,1]
boots[1, ]$splits[1]
boots[1, ]$splits[1][1]
boots[1, ]$splits[1][1][1]
boots[1, ]$splits[1][1][2]
boots[1, ]$splits[2]
boots[1, ]$splits[[1]]
boots[1, ]$splits[[1]]$data
boots[1, ]$splits
as.data.frame(boots[1, ]$splits)
tibble(boots[1, ]$splits)
as.tibble(boots[1, ]$splits)
as_tibble(boots[1, ]$splits)
as.data.frame(boots[1, ]$splits)
tibble::tibble(as.data.frame(boots[1, ]$splits))
tibble::tibble(as.data.frame(boots[2, ]$splits))
tibble::tibble(as.data.frame(boots[2, ]$splits))
tibble::tibble(as.data.frame(boots[4, ]$splits))
tibble::tibble(as.data.frame(boots[4, ]$splits))
lacs::get_abstracts(as.data.frame(boots[4, ]$splits))
lacs::get_abstracts(as.data.frame(boots[4, ]$splits))
lacs::get_abstracts(as.data.frame(boots[4, ]$splits))
as.data.frame(boots[4, ]$splits
)
fit_plus_on_bootstrap <- function(split, vocabulary) {
split$splits |> as.data.frame() |> lacs::get_abstracts() |>
fit_plus(vocabulary = vocabulary)
}
fit_plus_on_bootstrap <- function(split, vocabulary) {
split$splits |>
as.data.frame() |>
lacs::get_abstracts() |>
get_dtm(vocabulary = vocabulary) |>
fit_plus(vocabulary = vocabulary)
}
get_dtm_on_bootstrap <- function(split, vocabulary) {
get_dtm(split, vocabulary)
}
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap, v) )
fit_plus_on_bootstrap <- function(split, vocabulary) {
split$splits |>
as.data.frame() |>
lacs::get_abstracts()
# |>
#   get_dtm(vocabulary = vocabulary) |>
#   fit_plus(vocabulary = vocabulary)
}
get_dtm_on_bootstrap <- function(split, vocabulary) {
get_dtm(split, vocabulary)
}
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap, v) )
fit_plus_on_bootstrap <- function(split, vocabulary) {
split$splits |>
as.data.frame()
#lacs::get_abstracts()
# |>
#   get_dtm(vocabulary = vocabulary) |>
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap, v) )
boot_models
fit_plus_on_bootstrap <- function(split) {
split$splits |>
as.data.frame()
#lacs::get_abstracts()
# |>
#   get_dtm(vocabulary = vocabulary) |>
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap) )
boot_models
split
fit_plus_on_bootstrap <- function(split) {
splits |>
as.data.frame() |>
lacs::get_abstracts()
# |>
#   get_dtm(vocabulary = vocabulary) |>
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap) )
boots
fit_plus_on_bootstrap <- function(split) {
split |>
as.data.frame() |>
lacs::get_abstracts()
# |>
#   get_dtm(vocabulary = vocabulary) |>
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(model = map(splits, fit_plus_on_bootstrap) )
boot_models
fit_plus_on_bootstrap <- function(split) {
split |>
as.data.frame() |>
lacs::get_abstracts() |>
get_dtm(vocabulary = vocabulary)
#   fit_plus(vocabulary = vocabulary)
}
dtm_on_bootstrap <- function(split, vocabulary) {
split |>
as.data.frame() |>
lacs::get_abstracts() |>
get_dtm(vocabulary = vocabulary)
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(dtm  = purrr::map(splits, dtm_on_bootstrap, vocabulary,
plus = purrr::map(dtm, fit_plus, vocabulary)) )
boot_models <-  boots %>%
mutate(dtm  = purrr::map(splits, dtm_on_bootstrap, vocabulary),
plus = purrr::map(dtm, fit_plus, vocabulary) )
v
boot_models <-  boots %>%
mutate(dtm  = purrr::map(splits, dtm_on_bootstrap, v),
plus = purrr::map(dtm, fit_plus, v) )
dtm_on_bootstrap <- function(split, vocabulary) {
split |>
as.data.frame() |>
lacs::get_abstracts() |>
get_dtm(vocabulary = vocabulary)
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(dtm  = purrr::map(splits, dtm_on_bootstrap, v))
boot_models
dtm_on_bootstrap <- function(split, vocabulary) {
split |>
as.data.frame() |>
lacs::get_abstracts()
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(abstracts  = purrr::map(splits, abstracts_on_bootstrap),
plus = purrr::map(abstracts, fit_plus, v))
abstracts_on_bootstrap <- function(split, vocabulary) {
split |>
as.data.frame() |>
lacs::get_abstracts()
#   fit_plus(vocabulary = vocabulary)
}
boot_models <-  boots %>%
mutate(abstracts  = purrr::map(splits, abstracts_on_bootstrap),
plus = purrr::map(abstracts, fit_plus, v))
boot_models
boot_models[1, ]
boot_models[1, ]$plus
get_predictions
# get_dtm_on_bootstrap <- function(split, vocabulary) {
#   get_dtm(split, vocabulary)
# }
library(lacs)
get_predictions
lacs::get_predictions
document()
