abstracts_data_frame
lacs
getwd()
lacsSample
lacsSample <- readr::read_csv("data-raw/lacsSample")
lacsSample
usethis::use_data(lacsSample)
devtools::document()
it_matrix
prep_fun
lacs
stop_words
stop_words <- stop_words
stop_words <- stop_words::stop_words()
stop_words <- stopwords::stop_words()
stopwords
stopwords::stopwords
install.packages("stopwords")
v
stop_words <- stopwords::stop_words()
stopwords <- stopwords::stopwords
stopwords
stopwords <- stopwords::stopwords()
stopwords
it_matrix
it_matrix = text2vec::itoken(lacs$abstract,
preprocessor = prep_fun,
#tok_fun = word_tokenizer,
progressbar = TRUE)
lacs$abstract
lacs
lacs <- readr::read_csv("C:/Users/norma/OneDrive/Documents/GitHub/abstractsHostParasites/data-raw/lacs.csv") %>%
mutate(abstract = utf8::utf8_encode(abstract ))
lacs <- readr::read_csv("C:/Users/norma/OneDrive/Documents/GitHub/abstractsHostParasites/data-raw/lacs.csv") |>
mutate(abstract = utf8::utf8_encode(abstract ))
lacs <- readr::read_csv("C:/Users/norma/OneDrive/Documents/GitHub/abstractsHostParasites/data-raw/lacs.csv") |>
dplyr::mutate(abstract = utf8::utf8_encode(abstract ))
lacs
lacs |>
select(-1)
lacs |>
dplyr::select(-1)
lacslacs |>
dplyr::select(-1)
lacs <- lacs |>
dplyr::select(-1)
lacs |>
readr::write_csv("C:/Users/norma/OneDrive/Documents/GitHub/abstractsHostParasites/data-raw/lacs.csv")
lacs
lacs <- readr::read_csv("C:/Users/norma/OneDrive/Documents/GitHub/abstractsHostParasites/data-raw/lacs.csv")
lacs
usethis::use_build_ignore("data-raw")
lacs
lacs
lacs
example_doi <- lacs$doi[1:100]
example_title <- lacs$title[1:100]
example_abstract <- lacs$abstract[1:100]
example_class <- lacs$class[1:100]
usethis::use_data(example_doi)
usethis::use_data(example_title)
usethis::use_data(example_abstract)
usethis::use_data(example_class)
usethis
example_doi
class(example_doi)
lacs
usethis::use_package("tibble")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
values
lacs$doi
lacs$doia
lacs$dois
names(lacs)
any(names(lacs) == doi)
any(names(lacs) == 'doi')
any(names(lacs) == "doi")
abstracts_df
lacs[c("doi", "title")]
lacs[c("doi", "title", "abstract", "class")]
lacs
lacsSample
validate_abstracts(lacsSample)
lacs$class
unique(lacs$class)
unique(lacs$class)[1]
lacs$class
unique(lacs$class)
match(unique(lacs$class), "possitive")
unique(lacs$class)
match(unique(lacs$class), c("possitive", "unknown"))
match(unique(lacs$class), c("possitive", "unknow"))
is.na(match(unique(lacs$class), c("possitive", "unknow")))
any(is.na(match(unique(lacs$class), c("possitive", "unknow"))))
lacs$class
lacs$class
lacs$class |> uniaue()
lacs$class |> unique()
lacs$class |> unique() |> match(c("possitive", "unknow"))
lacs$class |> unique() |> match(c("possitive", "unknow")) |>
is.na()
lacs$class |> unique() |> match(c("possitive", "unknow")) |>
is.na() |> any()
lacs$class |> unique() |> match(c("possitive", "unknow")) |>
is.na() |> any() |> stopifnot()
lacs$class |> unique() |> match(c("possitive", "unknow")) |>
is.na() |> any() |> stopifnot()
classFlag <- lacs$class |> unique() |> match(c("possitive", "unknown")) |>
is.na() |> any()
classFlag
stopifnot(classFlag)
classFlag
stopifnot(!classFlag)
classFlag
lacs$class
lacs$class == c("possitive", "unknown")
match(lacs$class, c("possitive", "unknown"))
lacs$class
lacs$class %in%c("possitive", "unknown")
abstracts_df$class
library(devtools)
document()
validate_abstracts(lacsSample)
abstracts
document()
get_abstracts(lacsSample)
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
?
structure
document()
list(doi = doi,
title = title,
abstract = abstract,
class = class)
as_tibble
as_tibble
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
structure(1:6, dim = 2:3)
structure(tibble(lacsSample), class = "abstracts")
structure(tibble::tibble(lacsSample), class = "abstracts")
tibble::tibble(lacsSample)
tibble::tibble(lacsSample)
tibble::tibble(lacsSample)
structure(.Data = tibble::tibble(lacsSample), class = "abstracts")
f <- function(x){ structure(x, class = "abs") }
b <- f(a)
a <- lacsSample[1:10, ]
f <- function(x){ structure(x, class = "abs") }
b <- f(a)
class(b)
b
document()
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
)
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
tibble::tibble
ab <- new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
ab
tibble:::print.tbl_df(ab)
ab
print(ab)
class(ab)
ab <- new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
class(ab)
ab
class(ab)
tibble:::print.tbl_df
get_abstracts(lacsSample)
get_abstracts(lacsSample)
lacsSample
get_abstracts(lacs)
get_abstracts(lacsSample) |> class()
document()
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
term_count
abstracts <- get_abstracts(lacsSample)
abstracts
v <- get_vocabulary(abstracts)
tolower
usethis::use_package("text2vec")
usethis::use_package("dplyr)
usethis::use_package("dplyr")
usethis::use_package("stopwords")
document()
usethis::use_package("rlang")
document()
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
library(lacs)
new_abstracts(
doi = example_doi,
title = example_title,
abstract = example_abstract,
class = example_class
)
example_doi
glmnet:::print.cv.glmnet
tibble:::print.tbl_df
library(devtools)
document()
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
version
install.packages("Matrix")
